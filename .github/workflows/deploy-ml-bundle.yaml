name: deploy-ml-bundle

# Controls when the workflow will run
on:

  workflow_dispatch:
    inputs:
      project_name:
        description: ML use case name
        type: string
        required: true
      github_contributor_group:
        description: Contributors group in GitHub to grant contributor access to the new use-case repository
        type: string
        required: true
        default: "dip_ml_contributors"
      github_admins_group:
        description: Admins group in GitHub to grant admin access to the new use-case repository
        type: string
        required: true
        default: "dip_ml_admins"
      model_schema:
        description: Schema where models will be stored
        type: string
        default: "all_my_ml_models"
      inference_table:
        description: Table where the inferences will be stored under `catalog.schema.table_name` format 
        type: string
        default: "test_dev_catalog.dip_ml_usecase_01.predictions_usecase_01"
      include_feature_store:
        type: choice
        description: Whether to include Feature Store
        options:
          - "no"
          - "yes"
        default: "no"
        required: true
env:
  PYTHON_VERSION: '3.10'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  create-repo:
    runs-on: ubuntu-latest
    environment: default
    steps:
      - name: Create repository
        env:
          GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
        run: |
          sudo apt install gh -y
          echo "Creating repository ${{ github.repository_owner }}/${{ inputs.project_name }}..."
          gh repo create ${{ github.repository_owner }}/${{ inputs.project_name }} --private --description "ML project for ${{ inputs.project_name }} "
          echo "Granting accesses to the repository ${{ github.repository_owner }}/${{ inputs.project_name }}..."
          gh api -X PUT /orgs/${{ github.repository_owner }}/teams/${{ inputs.github_admins_group }}/repos/${{ github.repository_owner }}/${{ inputs.project_name }} -f permission=admin
          gh api -X PUT /orgs/${{ github.repository_owner }}/teams/${{ inputs.github_contributor_group }}/repos/${{ github.repository_owner }}/${{ inputs.project_name }} -f permission=push
          echo "Setting secrets on repository ${{ github.repository_owner }}/${{ inputs.project_name }}..."
          if [ "${{ vars.USE_DATABRICKS_SERVICE_PRINCIPAL }}" != "" ]; then
            gh secret set STAGING_DATABRICKS_HOST -b "${{ vars.DATABRICKS_STAGING_WORKSPACE_HOST }}" -R ${{ github.repository_owner }}/${{ inputs.project_name }}
            gh secret set STAGING_DATABRICKS_CLIENT_ID -b "${{ vars.DATABRICKS_STAGING_CLIENT_ID }}" -R ${{ github.repository_owner }}/${{ inputs.project_name }}
            gh secret set STAGING_DATABRICKS_CLIENT_SECRET -b "${{ secrets.DATABRICKS_STAGING_CLIENT_SECRET }}" -R ${{ github.repository_owner }}/${{ inputs.project_name }}
            gh secret set PROD_DATABRICKS_HOST -b "${{ vars.DATABRICKS_PROD_WORKSPACE_HOST }}" -R ${{ github.repository_owner }}/${{ inputs.project_name }}
            gh secret set PROD_DATABRICKS_CLIENT_ID -b "${{ vars.DATABRICKS_PROD_CLIENT_ID }}" -R ${{ github.repository_owner }}/${{ inputs.project_name }}
            gh secret set PROD_DATABRICKS_CLIENT_SECRET -b "${{ secrets.DATABRICKS_PROD_CLIENT_SECRET }}" -R ${{ github.repository_owner }}/${{ inputs.project_name }}
          elif [ "${{ vars.DATABRICKS_CLOUD }}" = "azure" ]; then
            gh secret set STAGING_AZURE_SP_TENANT_ID -b "${{ vars.DATABRICKS_STAGING_TENANT_ID }}" -R ${{ github.repository_owner }}/${{ inputs.project_name }}
            gh secret set STAGING_AZURE_SP_APPLICATION_ID -b "${{ vars.DATABRICKS_STAGING_CLIENT_ID }}" -R ${{ github.repository_owner }}/${{ inputs.project_name }}
            gh secret set STAGING_AZURE_SP_CLIENT_SECRET -b "${{ secrets.DATABRICKS_STAGING_CLIENT_SECRET }}" -R ${{ github.repository_owner }}/${{ inputs.project_name }}
            gh secret set PROD_AZURE_SP_TENANT_ID -b "${{ vars.DATABRICKS_PROD_TENANT_ID }}" -R ${{ github.repository_owner }}/${{ inputs.project_name }}
            gh secret set PROD_AZURE_SP_APPLICATION_ID -b "${{ vars.DATABRICKS_PROD_CLIENT_ID }}" -R ${{ github.repository_owner }}/${{ inputs.project_name }}
            gh secret set PROD_AZURE_SP_CLIENT_SECRET -b "${{ secrets.DATABRICKS_PROD_CLIENT_SECRET }}" -R ${{ github.repository_owner }}/${{ inputs.project_name }}
          else
            exit 1
          fi

  initialize-repo:
    runs-on: ubuntu-latest
    environment: default
    needs: create-repo
    steps:
      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize bundle
        env:
          DATABRICKS_HOST: ${{ vars.DATABRICKS_STAGING_WORKSPACE_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          echo '{
            "input_setup_cicd_and_project": "CICD_and_Project",
            "input_project_name": "${{ inputs.project_name }}",
            "input_cloud": "${{ vars.DATABRICKS_CLOUD }}",
            "input_cicd_platform": "${{ vars.DATABRICKS_CICD_PLATFORM }}",
            "input_databricks_staging_workspace_host": "${{ vars.DATABRICKS_STAGING_WORKSPACE_HOST }}",
            "input_databricks_prod_workspace_host": "${{ vars.DATABRICKS_PROD_WORKSPACE_HOST }}",
            "input_default_branch": "main",
            "input_release_branch": "release",
            "input_read_user_group": "${{ vars.DATABRICKS_READ_USER_GROUP }}",
            "input_include_models_in_unity_catalog": "yes",
            "input_staging_catalog_name": "${{ vars.DATABRICKS_STAGING_CATALOG_NAME }}",
            "input_prod_catalog_name": "${{ vars.DATABRICKS_PROD_CATALOG_NAME }}",
            "input_test_catalog_name": "${{ vars.DATABRICKS_TEST_CATALOG_NAME }}",
            "input_schema_name": "${{ inputs.model_schema }}",
            "input_unity_catalog_read_user_group": "${{ vars.DATABRICKS_UNITY_CATALOG_READ_USER_GROUP }}",
            "input_inference_table_name": "${{ inputs.inference_table }}",
            "input_include_feature_store": "${{ inputs.include_feature_store }}"
          }' > config.json
          databricks bundle init mlops-stacks --tag v0.4 --config-file config.json
          # bundle version (tag) is pinned based on https://github.com/databricks/mlops-stacks/tags
          # read this https://docs.databricks.com/en/dev-tools/bundles/settings.html#bundle-syntax-mappings
          # also check this https://github.com/databricks/mlops-stacks
          # and also this https://gist.github.com/DaniJG/b21170482545ad8c93874d164fd97a90 and this
          # https://github.com/databricks/mlops-stacks/blob/main/tests/example-project-configs/azure/azure-github.json
          ls -a
      - name: Initialize local repository
        run: |
          echo "Copying data discovery notebook into the templated solution folder..."
          ls -a
          ls ./${{ inputs.project_name }}/ -a
          ls ./${{ inputs.project_name }}/${{ inputs.project_name }}/ -a
          cp -r custom_notebooks/discovery ./${{ inputs.project_name }}/${{ inputs.project_name }}/discovery
          echo "Commiting all the templated solution folder into the repository ${{ github.repository_owner }}/${{ inputs.project_name }}..."
          cd ${{ inputs.project_name }}
          git init -b main
          git config user.email "noreply@digital-power.com"
          git config user.name "${{ github.actor }}"
          git add .
          git commit -m "Initialize the repository"

      - name: Run clusters in single-user mode
        run: |
          cd ${{ inputs.project_name }}
          # See:
          # https://docs.databricks.com/en/compute/access-mode-limitations.html#shared-access-mode-limitations-on-unity-catalog
          # https://docs.databricks.com/en/dev-tools/bundles/variables.html#custom-variables
          # https://docs.databricks.com/api/azure/workspace/jobs/create#job_clusters-new_cluster-data_security_mode
          sed -i "
            s/\(variables:.*\)/\1\n  sp_client_id:\n    description: Client ID (or Application ID) of the service principal./
            s/\( *\)\(${{ vars.DATABRICKS_STAGING_CATALOG_NAME }}:.*\)/\1\2\n\1  variables:\n\1    sp_client_id: ${{ vars.DATABRICKS_STAGING_CLIENT_ID }}/
            s/\( *\)\(${{ vars.DATABRICKS_PROD_CATALOG_NAME }}:.*\)/\1\2\n\1  variables:\n\1    sp_client_id: ${{ vars.DATABRICKS_PROD_CLIENT_ID }}/
            s/\( *\)\(${{ vars.DATABRICKS_TEST_CATALOG_NAME }}:.*\)/\1\2\n\1  variables:\n\1    sp_client_id: ${{ vars.DATABRICKS_STAGING_CLIENT_ID }}/
          " ${{ inputs.project_name }}/databricks.yml
          sed -i "
            s/\( *\)\(new_cluster:\)\$/\1\2\n\1  data_security_mode: SINGLE_USER\n\1  single_user_name: \${var.sp_client_id}/
          " ${{ inputs.project_name }}/resources/*.yml
          git commit -a -m "Run clusters in single-user mode"

      - name: Modify service principal source
        if: ${{ vars.USE_DATABRICKS_SERVICE_PRINCIPAL != '' }}
        run: |
          cd ${{ inputs.project_name }}
          # See https://docs.databricks.com/en/dev-tools/auth/oauth-m2m.html#finish-configuring-oauth-m2m-authentication
          if [ "${{ vars.DATABRICKS_CLOUD }}" = "azure" ]; then
            git ls-files | xargs -n 1 sed -i "
              s/ARM_TENANT_ID\|AZURE_SP_TENANT_ID/DATABRICKS_HOST/g
              s/ARM_CLIENT_ID\|AZURE_SP_APPLICATION_ID/DATABRICKS_CLIENT_ID/g
              s/ARM_CLIENT_SECRET\|AZURE_SP_CLIENT_SECRET/DATABRICKS_CLIENT_SECRET/g
            "
            sed -i "13d" .github/workflows/deploy-cicd.yml
          else
            exit 1
          fi
          git commit -a -m "Modify service principal source"

      - name: Push to remote
        env:
          GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
        run: |
          cd ${{ inputs.project_name }}
          git remote add origin "https://$GH_TOKEN@github.com/${{ github.repository_owner }}/${{ inputs.project_name }}.git"
          git push -u origin main